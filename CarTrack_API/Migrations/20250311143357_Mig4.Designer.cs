// <auto-generated />
using System;
using CarTrack_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarTrack_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250311143357_Mig4")]
    partial class Mig4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppointmentDeal", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int>("DealId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId", "DealId");

                    b.HasIndex("DealId");

                    b.ToTable("AppointmentDeal");
                });

            modelBuilder.Entity("CarTrack_API.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("MaintenanceRecordId")
                        .HasColumnType("integer");

                    b.Property<int>("MechanicId")
                        .HasColumnType("integer");

                    b.Property<int>("RepairShopId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceRecordId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("RepairShopId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CarTrack_API.Models.Body", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("CarTrack_API.Models.ClientProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("ClientProfiles");
                });

            modelBuilder.Entity("CarTrack_API.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("RepairShopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepairShopId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("CarTrack_API.Models.MaintenanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RepairShopId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepairShopId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("CarTrack_API.Models.ManagerProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("ManagerProfiles");
                });

            modelBuilder.Entity("CarTrack_API.Models.MechanicProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RepairShopId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("RepairShopId");

                    b.ToTable("MechanicProfiles");
                });

            modelBuilder.Entity("CarTrack_API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CarTrack_API.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("CarTrack_API.Models.RepairShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("RepairShops");
                });

            modelBuilder.Entity("CarTrack_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarTrack_API.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CarTrack_API.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("integer");

                    b.Property<int>("Vin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehicleEngine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cylinders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriveType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HorsePower")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<int>("TorqueFtLbs")
                        .HasColumnType("integer");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleEngines");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyId")
                        .HasColumnType("integer");

                    b.Property<int>("Consumption")
                        .HasColumnType("integer");

                    b.Property<int>("FuelTankCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("ModelFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProducerId")
                        .HasColumnType("integer");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleEngineId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("VehicleEngineId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehiclePaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaperType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclePapers");
                });

            modelBuilder.Entity("AppointmentDeal", b =>
                {
                    b.HasOne("CarTrack_API.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.Deal", null)
                        .WithMany()
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarTrack_API.Models.Appointment", b =>
                {
                    b.HasOne("CarTrack_API.Models.MaintenanceRecord", "MaintenanceRecord")
                        .WithMany("Appointments")
                        .HasForeignKey("MaintenanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.MechanicProfile", "Mechanic")
                        .WithMany("Appointments")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.RepairShop", "RepairShop")
                        .WithMany("Appointments")
                        .HasForeignKey("RepairShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.Vehicle", "Vehicle")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceRecord");

                    b.Navigation("Mechanic");

                    b.Navigation("RepairShop");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarTrack_API.Models.ClientProfile", b =>
                {
                    b.HasOne("CarTrack_API.Models.User", "User")
                        .WithOne("ClientProfile")
                        .HasForeignKey("CarTrack_API.Models.ClientProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarTrack_API.Models.Deal", b =>
                {
                    b.HasOne("CarTrack_API.Models.RepairShop", "RepairShop")
                        .WithMany("Deals")
                        .HasForeignKey("RepairShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairShop");
                });

            modelBuilder.Entity("CarTrack_API.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("CarTrack_API.Models.RepairShop", null)
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("RepairShopId");

                    b.HasOne("CarTrack_API.Models.Vehicle", "Vehicle")
                        .WithOne("MaintenanceRecord")
                        .HasForeignKey("CarTrack_API.Models.MaintenanceRecord", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarTrack_API.Models.ManagerProfile", b =>
                {
                    b.HasOne("CarTrack_API.Models.User", "User")
                        .WithOne("ManagerProfile")
                        .HasForeignKey("CarTrack_API.Models.ManagerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarTrack_API.Models.MechanicProfile", b =>
                {
                    b.HasOne("CarTrack_API.Models.RepairShop", "RepairShop")
                        .WithMany("Mechanics")
                        .HasForeignKey("RepairShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.User", "User")
                        .WithOne("MechanicProfile")
                        .HasForeignKey("CarTrack_API.Models.MechanicProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairShop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarTrack_API.Models.Notification", b =>
                {
                    b.HasOne("CarTrack_API.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarTrack_API.Models.RepairShop", b =>
                {
                    b.HasOne("CarTrack_API.Models.ManagerProfile", "Manager")
                        .WithMany("RepairShops")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CarTrack_API.Models.User", b =>
                {
                    b.HasOne("CarTrack_API.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarTrack_API.Models.Vehicle", b =>
                {
                    b.HasOne("CarTrack_API.Models.ClientProfile", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehicleModel", b =>
                {
                    b.HasOne("CarTrack_API.Models.Body", "Body")
                        .WithMany("VehicleModels")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.Producer", "Producer")
                        .WithMany("VehicleModels")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarTrack_API.Models.VehicleEngine", "VehicleEngine")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleEngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");

                    b.Navigation("Producer");

                    b.Navigation("VehicleEngine");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehiclePaper", b =>
                {
                    b.HasOne("CarTrack_API.Models.Vehicle", "Vehicle")
                        .WithMany("VehiclePapers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarTrack_API.Models.Body", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("CarTrack_API.Models.ClientProfile", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CarTrack_API.Models.MaintenanceRecord", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CarTrack_API.Models.ManagerProfile", b =>
                {
                    b.Navigation("RepairShops");
                });

            modelBuilder.Entity("CarTrack_API.Models.MechanicProfile", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CarTrack_API.Models.Producer", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("CarTrack_API.Models.RepairShop", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Deals");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("Mechanics");
                });

            modelBuilder.Entity("CarTrack_API.Models.User", b =>
                {
                    b.Navigation("ClientProfile")
                        .IsRequired();

                    b.Navigation("ManagerProfile")
                        .IsRequired();

                    b.Navigation("MechanicProfile")
                        .IsRequired();

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("CarTrack_API.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarTrack_API.Models.Vehicle", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MaintenanceRecord");

                    b.Navigation("VehiclePapers");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehicleEngine", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("CarTrack_API.Models.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
